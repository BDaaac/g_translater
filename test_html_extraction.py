import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def extract_body_content_from_html(html_content: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ <body> –∏–∑ HTML, —É–¥–∞–ª—è—è CSS —Å—Ç–∏–ª–∏ –∏ –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ø–∞–¥–∞–Ω–∏—è CSS —Å—Ç–∏–ª–µ–π –≤ —Ç–µ–ª–æ EPUB —Ñ–∞–π–ª–∞
    """
    if not html_content or not html_content.strip():
        return ""
    
    try:
        from bs4 import BeautifulSoup
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –≥–¥–µ CSS —Å—Ç–∏–ª–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        # –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–ª–∞–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "0002_Chapter_2_Bom__Spring_1 <br />body { font-family...")
        if '<br />body {' in html_content and 'font-family' in html_content:
            logger.info("üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã CSS —Å—Ç–∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ <br /> –∏ –∏—â–µ–º CSS –±–ª–æ–∫
            parts = html_content.split('<br />')
            
            # –ò—â–µ–º —á–∞—Å—Ç—å —Å CSS —Å—Ç–∏–ª—è–º–∏ –∏ —É–¥–∞–ª—è–µ–º –µ—ë
            clean_parts = []
            css_block_started = False
            
            for part in parts:
                part_stripped = part.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —á–∞—Å—Ç—å CSS —Å—Ç–∏–ª–µ–º
                if ('body {' in part_stripped or 
                    'font-family' in part_stripped or
                    'line-height' in part_stripped or
                    'margin:' in part_stripped or
                    'padding:' in part_stripped or
                    'color:' in part_stripped or
                    part_stripped.endswith('}') and any(css_prop in part_stripped for css_prop in ['font-size', 'border', 'background'])):
                    logger.info(f"   –£–¥–∞–ª—è–µ–º CSS —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {part_stripped[:100]}...")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
                if not part_stripped:
                    continue
                    
                clean_parts.append(part)
            
            # –°–æ–µ–¥–∏–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
            html_content = '<br />'.join(clean_parts)
            logger.info(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å {len(clean_parts)} —á–∞—Å—Ç–µ–π")
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–≥ <body>
        body_tag = soup.find('body')
        if body_tag:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body, —É–±–∏—Ä–∞—è —Å–∞–º —Ç–µ–≥ <body>
            body_content = ""
            for element in body_tag.contents:
                body_content += str(element)
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body ({len(body_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return body_content.strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–∞ body, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —É–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏
            logger.warning("‚ö†Ô∏è –¢–µ–≥ <body> –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ <head>, <style>, <html>, –∏ DOCTYPE
            content = re.sub(r'<!DOCTYPE[^>]*>', '', html_content, flags=re.IGNORECASE)
            content = re.sub(r'<html[^>]*>', '', content, flags=re.IGNORECASE)
            content = re.sub(r'</html>', '', content, flags=re.IGNORECASE)
            content = re.sub(r'<head[^>]*>.*?</head>', '', content, flags=re.DOTALL | re.IGNORECASE)
            content = re.sub(r'<style[^>]*>.*?</style>', '', content, flags=re.DOTALL | re.IGNORECASE)
            content = re.sub(r'<\?xml[^>]*\?>', '', content, flags=re.IGNORECASE)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç CSS —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ–ø–∞—Å—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            content = re.sub(r'body\s*\{[^}]*\}', '', content, flags=re.DOTALL | re.IGNORECASE)
            content = re.sub(r'[a-zA-Z\-]+\s*\{[^}]*\}', '', content, flags=re.DOTALL)
            
            # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ <br /> —Ç–µ–≥–∏
            content = re.sub(r'<br\s*/?>(\s*<br\s*/?>\s*)+', '<br />', content, flags=re.IGNORECASE)
            content = re.sub(r'\n\s*\n\s*\n+', '\n\n', content)
            
            return content.strip()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è body –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        logger.info("   –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        return html_content

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –≤–∞—à–∏–º –ø—Ä–∏–º–µ—Ä–æ–º
test_content = """0002_Chapter_2_Bom__Spring_1 
<br />body { font-family: sans-serif; line-height: 1.6; margin: 2em auto; max-width: 800px; padding: 0 1em; color: #333; background-color: #fdfdfd; }<br />p { margin-top: 0; margin-bottom: 1em; text-align: justify; }<br />h1, h2, h3, h4, h5, h6 { margin-top: 1.8em; margin-bottom: 0.6em; line-height: 1.3; font-weight: normal; color: #111; border-bottom: 1px solid #eee; padding-bottom: 0.2em;}<br />h1 { font-size: 2em; } h2 { font-size: 1.7em; } h3 { font-size: 1.4em; }<br />img { max-width: 100%; height: auto; display: block; margin: 1.5em auto; border: 1px solid #ddd; border-radius: 4px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }<br />hr { border: none; border-top: 1px solid #ccc; margin: 2.5em 0; }<br />ul, ol { margin-left: 1.5em; margin-bottom: 1em; padding-left: 1.5em; }<br />li { margin-bottom: 0.4em; }<br />strong { font-weight: bold; }<br />em { font-style: italic; }<br />a { color: #007bff; text-decoration: none; } a:hover { text-decoration: underline; }<br />code { background-color: #f0f0f0; padding: 0.1em 0.3em; border-radius: 3px; font-family: Consolas, monospace; font-size: 0.9em; }<br />pre { background-color: #f5f5f5; border: 1px solid #ddd; border-radius: 4px; padding: 1em; overflow-x: auto; white-space: pre; }<br />pre code { background-color: transparent; padding: 0; border-radius: 0; font-size: 0.9em; }<br /> 
–ì–ª–∞–≤–∞ 2: –ë–æ–º / –í–µ—Å–Ω–∞ (1) 
–Æ –î–∂–∏—Ç–∞—ç –¥–æ—Å—Ç–∞–ª –∏–∑ —à–∫–∞—Ñ–∞ —É–Ω–∏—Ñ–æ—Ä–º—É, –Ω–∞–¥–µ–ª"""

print("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
print(test_content[:200] + "..." if len(test_content) > 200 else test_content)
print("\n" + "="*50 + "\n")

cleaned_content = extract_body_content_from_html(test_content)

print("–û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
print(cleaned_content)
