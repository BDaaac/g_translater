import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def extract_body_content_from_html(html_content: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ <body> –∏–∑ HTML, —É–¥–∞–ª—è—è CSS —Å—Ç–∏–ª–∏ –∏ –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ø–∞–¥–∞–Ω–∏—è CSS —Å—Ç–∏–ª–µ–π –≤ —Ç–µ–ª–æ EPUB —Ñ–∞–π–ª–∞
    """
    if not html_content or not html_content.strip():
        return ""
    
    try:
        from bs4 import BeautifulSoup
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –≥–¥–µ CSS —Å—Ç–∏–ª–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        # –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–ª–∞–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "0002_Chapter_2_Bom__Spring_1 <br />body { font-family...")
        if '<br />body {' in html_content and 'font-family' in html_content:
            logger.info("üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã CSS —Å—Ç–∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ <br /> –∏ –∏—â–µ–º CSS –±–ª–æ–∫
            parts = html_content.split('<br />')
            
            # –ò—â–µ–º —á–∞—Å—Ç—å —Å CSS —Å—Ç–∏–ª—è–º–∏ –∏ —É–¥–∞–ª—è–µ–º –µ—ë
            clean_parts = []
            css_block_started = False
            
            for part in parts:
                part_stripped = part.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —á–∞—Å—Ç—å CSS —Å—Ç–∏–ª–µ–º
                if ('body {' in part_stripped or 
                    'font-family' in part_stripped or
                    'line-height' in part_stripped or
                    'margin:' in part_stripped or
                    'padding:' in part_stripped or
                    'color:' in part_stripped or
                    part_stripped.endswith('}') and any(css_prop in part_stripped for css_prop in ['font-size', 'border', 'background'])):
                    logger.info(f"   –£–¥–∞–ª—è–µ–º CSS —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {part_stripped[:100]}...")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
                if not part_stripped:
                    continue
                    
                clean_parts.append(part)
            
            # –°–æ–µ–¥–∏–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
            html_content = '<br />'.join(clean_parts)
            logger.info(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å {len(clean_parts)} —á–∞—Å—Ç–µ–π")
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–≥ <body>
        body_tag = soup.find('body')
        if body_tag:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body, —É–±–∏—Ä–∞—è —Å–∞–º —Ç–µ–≥ <body>
            body_content = ""
            for element in body_tag.contents:
                body_content += str(element)
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body ({len(body_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return body_content.strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–∞ body, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —É–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏
            logger.warning("‚ö†Ô∏è –¢–µ–≥ <body> –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ <head>, <style>, <html>, –∏ DOCTYPE
            content = re.sub(r'<!DOCTYPE[^>]*>', '', html_content, flags=re.IGNORECASE)
            content = re.sub(r'<html[^>]*>', '', content, flags=re.IGNORECASE)
            content = re.sub(r'</html>', '', content, flags=re.IGNORECASE)
            content = re.sub(r'<head[^>]*>.*?</head>', '', content, flags=re.DOTALL | re.IGNORECASE)
            content = re.sub(r'<style[^>]*>.*?</style>', '', content, flags=re.DOTALL | re.IGNORECASE)
            content = re.sub(r'<\?xml[^>]*\?>', '', content, flags=re.IGNORECASE)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç CSS —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ–ø–∞—Å—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            content = re.sub(r'body\s*\{[^}]*\}', '', content, flags=re.DOTALL | re.IGNORECASE)
            content = re.sub(r'[a-zA-Z\-]+\s*\{[^}]*\}', '', content, flags=re.DOTALL)
            
            # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ <br /> —Ç–µ–≥–∏
            content = re.sub(r'<br\s*/?>(\s*<br\s*/?>\s*)+', '<br />', content, flags=re.IGNORECASE)
            content = re.sub(r'\n\s*\n\s*\n+', '\n\n', content)
            
            return content.strip()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è body –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        logger.info("   –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        return html_content

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –≤–∞—à–∏–º HTML –ø—Ä–∏–º–µ—Ä–æ–º
test_html_content = """<p>–í 21-–º –≤–µ–∫–µ, —Å –†–µ—Å–ø—É–±–ª–∏–∫–æ–π –ö–æ—Ä–µ—è –≤ —Ü–µ–Ω—Ç—Ä–µ, –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –æ—Ç–∫—Ä—ã–ª–∏—Å—å –≤—Ä–∞—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∞–ª–∏ –≤—ã—Å—ã–ø–∞—Ç—å –º–æ–Ω—Å—Ç—Ä—ã. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∏ –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å–≤–µ—Ä—Ö–ª—é–¥–∏, –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–µ ¬´–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è–º–∏¬ª –∏ ¬´–ù–∞–≤—ã–∫–∞–º–∏¬ª.</p><p>–í —ç—Ç–æ—Ç –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–∑—ã–≤–∞–µ–º—ã–π –ù–æ–≤–æ–π –≠—Ä–æ–π, –ö–æ—Ä–µ—è –æ–∫–∞–∑–∞–ª–∞—Å—å –≤ –±–æ–ª–µ–µ —É–¥–∞—á–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ó–¥–µ—Å—å –±—ã–ª–æ –±–æ–ª—å—à–µ –ø–æ–¥–∑–µ–º–µ–ª–∏–π —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –∏ –¥—å—è–≤–æ–ª–∞–º–∏, —á–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.</p><p>–î–æ—Ö–æ–¥ –æ—Ç –¥—å—è–≤–æ–ª–æ–≤ –∏ —Ä–∞–∑—É–º–Ω—ã—Ö –≤–∏–¥–æ–≤ –±—ã–ª –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω, –∏ –∫ –ö–æ—Ä–µ–µ –æ—Ç–Ω–æ—Å–∏–ª–∏—Å—å —Ç–∞–∫ –∂–µ, –∫–∞–∫ —Ä–∞–Ω—å—à–µ –∫ –Ω–µ—Ñ—Ç–µ–¥–æ–±—ã–≤–∞—é—â–∏–º —Å—Ç—Ä–∞–Ω–∞–º, –∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ö–æ—Ä–µ—è –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∏—Ç –≤ —Ç—Ä–æ–π–∫—É –≤–µ–¥—É—â–∏—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞ –ø–æ –≤–æ–µ–Ω–Ω–æ–π –º–æ—â–∏.</p><p>–ò –¥–µ—Å—è—Ç—å –ª–µ—Ç –Ω–∞–∑–∞–¥ –ö–æ—Ä–µ—è –Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–ª–æ–¥—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ —Å –≤—ã–¥–∞—é—â–∏–º—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –≠—Ç–æ –±—ã–ª–æ –Ω–∞—á–∞–ª–æ–º –ì–æ—Ä–æ–¥–∞-–ê–∫–∞–¥–µ–º–∏–∏, ¬´–õ–æ–≥–æ–≤–∞¬ª.</p><p>¬´–î–∂–∏—Ç–∞—ç-—Å–æ–Ω–±—ç, –ø—Ä–∏–≤–µ—Ç!¬ª</p><p>¬´–î–∂–∏—Ç–∞—ç —Ç–æ–∂–µ –∑–¥–µ—Å—å? –ú—ã –≤—á–µ—Ä–∞ —Å–ª</p>"""

print("–ò—Å—Ö–æ–¥–Ω—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç:")
print(test_html_content[:200] + "..." if len(test_html_content) > 200 else test_html_content)
print("\n" + "="*50 + "\n")

cleaned_content = extract_body_content_from_html(test_html_content)

print("–û—á–∏—â–µ–Ω–Ω—ã–π Markdown –∫–æ–Ω—Ç–µ–Ω—Ç:")
print(cleaned_content)
print(f"\n–†–∞–∑–º–µ—Ä: {len(cleaned_content)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"–°–æ–¥–µ—Ä–∂–∏—Ç HTML —Ç–µ–≥–∏: {'–î–∞' if '<' in cleaned_content and '>' in cleaned_content else '–ù–µ—Ç'}")
